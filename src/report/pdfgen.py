from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle, Flowable
)
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.colors import HexColor

from reportlab.graphics.shapes import Drawing, Circle, String


from reportlab.lib.enums import TA_CENTER
from datetime import datetime
from data.models import ReportData

styles = getSampleStyleSheet()
style_normal = styles["Normal"]
style_title = ParagraphStyle("Title", parent=styles["Heading1"], alignment=2, fontSize=20)
style_subtitle = ParagraphStyle("Subtitle", parent=styles["Normal"], alignment=2, fontSize=10, italic=True)
style_meta = ParagraphStyle("Meta", parent=style_normal, spaceAfter=6)
style_footer = ParagraphStyle("Footer", parent=style_normal, alignment=0, fontSize=10)




class CircleBadge(Flowable):
    def __init__(self, letter, radius=12, color=HexColor("#D50000")):
        super().__init__()
        self.letter = letter
        self.radius = radius
        self.color = color
        self.width = self.height = 2 * radius

    def draw(self):
        d = Drawing(self.width, self.height)
        d.add(Circle(self.radius, self.radius, self.radius, fillColor=self.color, strokeColor=self.color))
        d.add(String(self.radius, self.radius - 4, self.letter,fontName="Helvetica",
                     fontSize=self.radius, textAnchor="middle"))
        d.drawOn(self.canv, 0, 0)



def badge(letter):
    color_map = {
        "A": HexColor("#D1FADF"),
        "B": HexColor("#E1F4A9"),
        "C": HexColor("#FCE8A2"),
        "D": HexColor("#FFD6AF"),
        "E": HexColor("#FECCCB"),
    }
    return CircleBadge(letter, radius=12, color=color_map.get(letter, HexColor("#9E9E9E")))


def issue_count_by_severity(issues, severity):
    return sum(1 for i in issues if i.severity.upper() == severity.upper())

def get_measure_value(measures, metric, default="0"):
    return measures.get(metric).value if metric in measures else default

def issue_block(title, value, grade):
    content = [
        Paragraph(f"<b>{title}</b>", style_normal),
        Paragraph(f"<font size=14><b>{value}</b></font> Open Issues", style_normal)
    ]
    return Table([[content, badge(grade)]], colWidths=[4*cm, 1*cm], style=TableStyle([
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ("ALIGN", (1, 0), (1, 0), "RIGHT"),
        ("LEFTPADDING", (0, 0), (-1, -1), 0),
        ("RIGHTPADDING", (0, 0), (-1, -1), 0),
        ("TOPPADDING", (0, 0), (-1, -1), 0),
        ("BOTTOMPADDING", (0, 0), (-1, -1), 0),
    ]))

def project_data_block(title, value, grade):
    content = [
        Paragraph(f"<b>{title}</b>", style_normal),
        Paragraph(f"<font size=14><b>{value}</b></font>", style_normal)
    ]
    return Table([[content, badge(grade)]], colWidths=[4*cm, 1*cm], style=TableStyle([
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ("ALIGN", (1, 0), (1, 0), "RIGHT"),
        ("LEFTPADDING", (0, 0), (-1, -1), 0),
        ("RIGHTPADDING", (0, 0), (-1, -1), 0),
        ("TOPPADDING", (0, 0), (-1, -1), 0),
        ("BOTTOMPADDING", (0, 0), (-1, -1), 0),
    ]))

def block_with_badge(title, value_html, grade):
    content = [
        Paragraph(f"<b>{title}</b>", style_normal),
        Paragraph(value_html, style_normal)
    ]
    return Table([[content, badge(grade)]], colWidths=[5*cm, 1*cm], style=TableStyle([
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ("ALIGN", (1, 0), (1, 0), "RIGHT"),
        ("LEFTPADDING", (0, 0), (-1, -1), 0),
        ("RIGHTPADDING", (0, 0), (-1, -1), 0),
        ("TOPPADDING", (0, 0), (-1, -1), 0),
        ("BOTTOMPADDING", (0, 0), (-1, -1), 0),
    ]))

def generate_pdf(report: ReportData, output_path="reflect_sonar_report.pdf"):
    doc = SimpleDocTemplate(output_path, pagesize=A4)
    elements = []

    logo_path = "toolsentinel-logo.png"
    logo_img = Image(logo_path)
    logo_img._restrictSize(3*cm, 3*cm)

    title = Paragraph("SonarQube SAST Report", style_title)
    subtitle = Paragraph("generated by Reflect Sonar", style_subtitle)

    title_stack = [[title], [subtitle]]
    title_table = Table(title_stack, colWidths=[10*cm])
    title_table.setStyle(TableStyle([
        ("ALIGN", (0, 0), (-1, -1), "RIGHT"),
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ("BOTTOMPADDING", (0, 0), (-1, -1), 0),
        ("TOPPADDING", (0, 0), (-1, -1), 0),
    ]))

    header = Table([[logo_img, title_table]], colWidths=[5*cm, None])
    header.setStyle(TableStyle([
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ("ALIGN", (1, 0), (1, 0), "RIGHT"),
        ("LEFTPADDING", (1, 0), (1, 0), 0),
    ]))
    elements.append(header)
    elements.append(Spacer(1, 1*cm))

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    elements.append(Paragraph(f"<b>Date:</b> {now}", style_meta))
    elements.append(Paragraph(f"<b>SonarQube Project Name:</b> {report.project.name}", style_meta))
    elements.append(Paragraph(f"<b>Path of Scanned Directory:</b> {report.project.key}", style_meta))
    elements.append(Spacer(1, 1*cm))

    coverage = float(get_measure_value(report.measures, "coverage", 0.0))
    cover_lines = int(get_measure_value(report.measures, "lines_to_cover", 0))
    duplication = float(get_measure_value(report.measures, "duplicated_lines_density", 0.0))
    dup_lines = int(get_measure_value(report.measures, "ncloc", 0))
    hotspot_count = len(report.hotspots)

    dashboard_data = [
        [  # Row 1
            issue_block("Security", str(issue_count_by_severity(report.issues, "CRITICAL")), "E"),
            issue_block("Reliability", str(issue_count_by_severity(report.issues, "MAJOR")),  "D"),
            issue_block("Maintainability", str(issue_count_by_severity(report.issues, "MINOR")), "A")
        ],
        [  # Row 2
            project_data_block("Accepted Issues", "0<br/><font size=8>Valid issues that were not fixed</font>", "C"),
            project_data_block("Coverage", f"{coverage}%<br/><font size=8>on {cover_lines} lines to cover</font>", "B"),
            project_data_block("Duplications", f"{duplication}%<br/><font size=8>on {dup_lines} lines</font>", "D")
        ],
        [  # Row 3
            issue_block("Security Hotspots", f"<font size=14><b>{hotspot_count}</b></font>", "E"),
            Spacer(0, 0), Spacer(0, 0)
        ]
    ]

    flattened_dashboard = [[cell for cell in row] for row in dashboard_data]
    t = Table(flattened_dashboard, colWidths=[6*cm]*3)
    t.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, -1), colors.whitesmoke),
        ("INNERGRID", (0, 0), (-1, -1), 0, colors.white),
        ("BOX", (0, 0), (-1, -1), 0.5, colors.lightgrey),
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ("LEFTPADDING", (0, 0), (-1, -1), 10),
        ("RIGHTPADDING", (0, 0), (-1, -1), 10),
        ("TOPPADDING", (0, 0), (-1, -1), 8),
        ("BOTTOMPADDING", (0, 0), (-1, -1), 8),
    ]))
    elements.append(t)
    elements.append(Spacer(1, 2*cm))

    note = (
        "<i>This report is generated by ReflectSonar, an open-source tool to add the report generation mechanism to SonarQube Community and Developer Edition. </i>"
        "<i>It is not affiliated with SonarSource. </i>"
        "<i>The report is generated based on SonarQube instance that its information is provided. All data is fetched from SonarQube API. </i>"
        "<i>ReflectSonar just provides a way to generate the report. </i>"
    )
    elements.append(Paragraph(note, style_footer))

    def footer(canvas, doc):
        page_num = f"{doc.page}"
        canvas.setFont("Helvetica", 9)
        canvas.drawRightString(A4[0] - 2*cm, 1.5*cm, f"{page_num}")

    doc.build(elements, onFirstPage=footer, onLaterPages=footer)
